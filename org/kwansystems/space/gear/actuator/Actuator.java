package org.kwansystems.space.gear.actuator;

import org.kwansystems.space.gear.ForceTorque;
import org.kwansystems.space.universe.Universe;
import org.kwansystems.tools.vector.*;

/**
 * Generator of Force and Torque
 * <p>
 * For ease in calculation here, a frame called the "station frame" is used. The
 * station frame is parallel to the body frame, but while the body frame has its
 * origin at the center of mass, the station frame has an arbirary origin. For 
 * rockets, this point is typically on the rocket axis, at or some distance behind
 * the aft end of the vehicle. While the center of mass changes as propellant is 
 * used, the station frame has a constant relation to the hardware itself. 
 * Therefore it is most convenient to keep track of the hardware in station 
 * coordinates.
 */
public abstract class Actuator {
  /**
   * Name of actuator
   */
  public String Name;
  public boolean Active;
  /**
   * Center of force, in station coordinates
   */
  public MathVector CoF;
  /**
   * Creates a new actuator
   * @param LName Name of the actuator, used to identify it in debugging and telemetry.
   * @param LCoF Center of Force, in station frame, in m
   */
  public Actuator(String LName, MathVector LCoF) {
    Name=LName;
    CoF=LCoF;
    Active=true;
  }
  /**
   * Calculates force and torque generated by this actuator
   * @param T Simulation time, s
   * @param RVEw Simulation state in inertial frame, m, s, rad
   * @param Mass Mass of vehicle at this time, kg
   * @param CoM Center of mass in station coordinates, m
   * @param U Universe the vehicle is in
   * @return ForceTorque object containing force on center of mass, in body 
   * frame, N, and torque about center of mass, in body frame, N*m.
   */
  public abstract ForceTorque getForceTorque(
    double T, 
    SixDOFState RVEw, 
    double Mass, 
    MathVector CoM, 
    Universe U
  );
  /**
   * String representation of object.
   * @return Reference to Name property
   */
  public String toString() {
    return Name;
  }
}
