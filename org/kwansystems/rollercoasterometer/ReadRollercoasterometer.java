package org.kwansystems.rollercoasterometer;

import java.awt.*;
import javax.swing.*;
import java.io.*;
import java.util.*;
import org.kwansystems.tools.*;
import org.kwansystems.tools.chart.*;

public class ReadRollercoasterometer extends javax.swing.JFrame {
    int blocklen;
    public ReadRollercoasterometer() throws IOException {
      initComponents();
      inf=new RandomAccessFile("Data/Rollercoasterometry/raw/LOG04.txt","r");
      block=0;
      blocklen=6000;
      read();
    }
    String[] columnName=new String[] {
      "3.3V reference",
      "-X acc (Positive DN is accelerate back)",
      "-Y acc (Positive DN is accelerate left)",
      "-Z acc (Positive DN is accelerate up)",
      "-Z rot (positive DN is yaw left)",
      "Time Code",
      "-x rot (Positive DN is roll left)",
      "+y rot (Positive DN is pitch up)"
    };
    public void read() throws IOException {
      ChartRecorder C=new ArrayListChartRecorder();
      int avg=1;
      inf.seek(blocklen*block*9*2*avg);
      try {
        for(int i=0;i<blocklen;i++) {
          double[] mean=new double[8];
          for(int j=0;j<avg;j++) {
            for(int k=0;k<8;k++) {
              mean[k]+=inf.readShort();
            }
            short junk=inf.readShort();
          }
          for(int k=0;k<8;k++) {
            mean[k]/=avg;
            C.Record(i,columnName[k],mean[k]);
          }
        }
      } catch (IOException e) {}
      C.PrintTable(displayPrinter1);
      lblMinute.setText(String.format("%d",blocklen*block));
    }
    RandomAccessFile inf;
    int block;
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        displayPrinter1 = new org.kwansystems.tools.chart.DisplayPrinter(false);
        btnPrev = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        lblMinute = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ReadRollercoasterometer");
        getContentPane().setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(displayPrinter1, gridBagConstraints);

        btnPrev.setText("<< Prev");
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        getContentPane().add(btnPrev, gridBagConstraints);

        btnNext.setText("Next >>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        getContentPane().add(btnNext, gridBagConstraints);

        lblMinute.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(lblMinute, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
      block--;
      try {
        read();
      } catch (IOException e) {
        throw new RuntimeException(e);
      }
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
      block++;
      try {
        read();
      } catch (IOException e) {
        throw new RuntimeException(e);
      }
    }//GEN-LAST:event_btnNextActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
              try {
                new ReadRollercoasterometer().setVisible(true);
              } catch (IOException e) {
                throw new RuntimeException(e);
              }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private org.kwansystems.tools.chart.DisplayPrinter displayPrinter1;
    private javax.swing.JLabel lblMinute;
    // End of variables declaration//GEN-END:variables

}
