/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DisplayPrinter.java
 *
 * Created on Apr 13, 2009, 10:07:40 AM
 */

package org.kwansystems.tools.chart;

import java.awt.*;
import javax.swing.*;
import java.io.*;
import java.util.*;
import org.kwansystems.tools.*;

/**
 *
 * @author jeppesen
 */
public class DisplayPrinter extends JPanel implements ChartPrinter,Observer {

    /** Creates new form DisplayPrinterCanvas2 */
    public DisplayPrinter() {
      this(true);
    }

    public DisplayPrinter(boolean shouldMakeOwnFrame) {
      initComponents();
      System.out.println(this);
      picChart.addObserver(this);
      final DisplayPrinter D=this;
      if(shouldMakeOwnFrame) {
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
          public void run() {
            JFrame frame = new JFrame("KOrbitCanvas Main");
            DisplayPrinter TP = D;
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.getContentPane().add(TP);
            frame.pack();
            frame.setVisible(true);
          }
        });
      }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblYmax = new javax.swing.JLabel();
        lblYmin = new javax.swing.JLabel();
        lblYmouse = new javax.swing.JLabel();
        lblTmin = new javax.swing.JLabel();
        lblTmax = new javax.swing.JLabel();
        lblTmouse = new javax.swing.JLabel();
        picChart = new org.kwansystems.tools.PictureBox();

        setLayout(new java.awt.GridBagLayout());

        lblYmax.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYmax.setText("lblYmax");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(lblYmax, gridBagConstraints);

        lblYmin.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYmin.setText("lblYmin");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(lblYmin, gridBagConstraints);

        lblYmouse.setFont(new java.awt.Font("Lucida Console", 0, 11)); // NOI18N
        lblYmouse.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYmouse.setText("lblYmouse");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weighty = 1.0;
        add(lblYmouse, gridBagConstraints);

        lblTmin.setText("lblTmin");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(lblTmin, gridBagConstraints);

        lblTmax.setText("lblTmax");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(lblTmax, gridBagConstraints);

        lblTmouse.setText("lblTmouse");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        add(lblTmouse, gridBagConstraints);

        picChart.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        picChart.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                picChartMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout picChartLayout = new javax.swing.GroupLayout(picChart);
        picChart.setLayout(picChartLayout);
        picChartLayout.setHorizontalGroup(
            picChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 335, Short.MAX_VALUE)
        );
        picChartLayout.setVerticalGroup(
            picChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 284, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(picChart, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void picChartMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_picChartMouseMoved
      double TMouse=evt.getPoint().x;
      double T=TMouse*Tmax/((double)(picChart.getWidth()));
      double YExt=Ymax-Ymin;
      double YMouse=(double)(picChart.getHeight())-evt.getPoint().y;
      double Y=YMouse*YExt/((double)(picChart.getHeight()))+Ymin;
      lblYmouse.setText(AutoRange.DisplayEngUnit(Y));
      lblTmouse.setText(AutoRange.DisplayEngUnit(T));
    }//GEN-LAST:event_picChartMouseMoved

  public double[][] Charts;
  double[] T;
  String[] ColumnNames;
  double Ymin,Ymax,Tmin,Tmax;
  public int psym=0;
  public int symsize=3;
  Color[] colors=new Color[] {
    Color.BLACK,
    new Color(128,64,0), //Brown
    Color.RED,
    Color.ORANGE,
    Color.YELLOW,
    Color.GREEN,
    Color.BLUE,
    Color.MAGENTA,
    Color.DARK_GRAY,
    Color.WHITE
  };
  public void drawPixel(Graphics g, int x, int y) {
    g.fillRect(x, y, 1, 1);
  }
  private void drawSymbol(Graphics G, int x, int y, int psym) {
    switch(Math.abs(psym)) {
      case 1:
        G.drawLine(x-symsize,y,x+symsize,y);
        G.drawLine(x,y-symsize,x,y+symsize);
        break;
      case 3:
        drawPixel(G,x,y);
        break;
    }
  }
  public void paintComponent(Graphics G) {
    super.paintComponent(G);
  }
  public void update(Observable o, Object arg) {
    if(Charts==null) return;
    int TIext=picChart.getWidth();
    int YIext=picChart.getHeight();
    double Text=Tmax-Tmin;
    double Yext=Ymax-Ymin;
    Graphics G=(Graphics) arg;

    for(int linenum=0;linenum<Charts.length;linenum++) {
      double[] Line=Charts[linenum];
      G.setColor(colors[linenum%colors.length]);
      G.drawString(ColumnNames[linenum], 2, (linenum+1)*10);
      int OldY=YIext-(int)((Line[0]-Ymin)*YIext/Yext);
      int OldT=0;
      if (Math.abs(psym)>0) drawSymbol(G,OldT,OldY,Math.abs(psym));
      for(int i=1;i<Line.length;i++) {
        int NewY=YIext-(int)((Line[i]-Ymin)*YIext/Yext);
        int NewT=(int)((T[i]-Tmin)*TIext/Text);
        if (psym<1)G.drawLine(OldT,OldY,NewT,NewY);
        OldY=NewY;
        OldT=NewT;
        drawSymbol(G,OldT,OldY,Math.abs(psym));
      }
    }
  }
  boolean FirstData,FirstRow;
  ChartRecorder CR;
  int ColNumber,RowNumber;
  public void setSize(double LTmin, double LTmax, double LYmin, double LYmax) {
    Tmin=LTmin;
    Tmax=LTmax;
    Ymin=LYmin;
    Ymax=LYmax;
  }
  public void setAutoSize(String[] ColumnNames) {
    Tmin=0;
    Tmax=CR.getTMax();
    Ymin=Double.POSITIVE_INFINITY;
    Ymax=Double.NEGATIVE_INFINITY;
    for(int i=0;i<ColumnNames.length;i++) {
      double thisMin=CR.columnMin(ColumnNames[i]);
      if(Ymin>thisMin) Ymin=thisMin;
      double thisMax=CR.columnMax(ColumnNames[i]);
      if(Ymax<thisMax) Ymax=thisMax;
    }
    double[] Auto=AutoRange.calcAutoRange(Ymin,Ymax,5);
    Ymin=Auto[0];
    Ymax=Auto[1];
    lblYmax.setText(AutoRange.DisplayEngUnit(Ymax,0));
    lblYmin.setText(AutoRange.DisplayEngUnit(Ymin,0));
    Auto=AutoRange.calcAutoRange(Tmin,Tmax,5);
    Tmin=Auto[0];
    Tmax=Auto[1];
    lblTmax.setText(AutoRange.DisplayEngUnit(Tmax,0));
    lblTmin.setText(AutoRange.DisplayEngUnit(Tmin,0));
  }
  public void StartOfChart(int a, int b, ChartRecorder LCR,String[] LColumnNames) {
    CR=LCR;
    FirstRow=true;
    ColumnNames=LColumnNames;
    setAutoSize(ColumnNames);
    RowNumber=0;
    T=new double[CR.NumRows()];
    Charts=new double[ColumnNames.length][CR.NumRows()];
  }
  public void BetweenHead() {}
  public void EndOfHead() {}
  public void Head(String S) {}
  public void StartOfRow() {FirstData=true;}
  public void BetweenData() {}
  public void EndOfRow() {RowNumber++;}
  public void Data(Object S) {
    double ScaleData=((Double)S).doubleValue();
    if(FirstData) {
      T[RowNumber]=ScaleData;
      FirstData=false;
      ColNumber=0;
    } else {
      Charts[ColNumber][RowNumber]=ScaleData;
      ColNumber++;
    }
  }
  public void NoData() {
    Data(0.0);
  }
  public void EndOfChart() {
    repaint();
  }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblTmax;
    private javax.swing.JLabel lblTmin;
    private javax.swing.JLabel lblTmouse;
    private javax.swing.JLabel lblYmax;
    private javax.swing.JLabel lblYmin;
    private javax.swing.JLabel lblYmouse;
    private org.kwansystems.tools.PictureBox picChart;
    // End of variables declaration//GEN-END:variables

  public static void main(String[] args) throws IOException {
    DisplayPrinter D=new DisplayPrinter(true);
    ChartRecorder C=new ArrayListChartRecorder();
    RandomAccessFile inf=new RandomAccessFile("c:\\documents and settings\\jeppesen\\Desktop\\LOG02.txt","r");
    for(int i=0;i<6000;i++) {
      C.Record(i, "Column 1", new Double(inf.readShort()));
      C.Record(i, "Column 2", new Double(inf.readShort()));
      C.Record(i, "Column 3", new Double(inf.readShort()));
      C.Record(i, "Column 4", new Double(inf.readShort()));
      C.Record(i, "Column 5", new Double(inf.readShort()));
      C.Record(i, "Column 6", new Double(inf.readShort()));
      C.Record(i, "Column 7", new Double(inf.readShort()));
      C.Record(i, "Column 8", new Double(inf.readShort()));
      short junk=inf.readShort();
    }
    C.PrintTable(D);
  }


}
