package org.kwansystems.tools.time;

import java.awt.*;
import javax.swing.*;
import javax.swing.event.*;

/**
 *
 * @author  chrisj
 */
public class TimePanel extends javax.swing.JPanel {

    /** Creates new form TimePanel2 */
    public TimePanel() {
        initComponents();
        spnMonth.getModel().setValue("Jan");
        recalcTime();
    }
    public String getMonthString() {
        return ((String) (spnMonth.getModel().getValue()));
    }
    public int getMonthNumber() {
        String M=getMonthString();
        int month = 0;
        while (!M.equals(Time.MonthAbbrev[month])) {
            month++;
        }
        month++;
        return month;
    }
    public int getDay() {
      return ((Integer)spnDay.getModel().getValue()).intValue();
    }
    public int getYear() {
      return ((Integer)spnYear.getModel().getValue()).intValue();
    }
    public int getHour() {
      return ((Integer)spnHour.getModel().getValue()).intValue();
    }
    public int getMin() {
      return ((Integer)spnMin.getModel().getValue()).intValue();
    }
    public int getSec() {
      return ((Integer)spnSec.getModel().getValue()).intValue();
    }
    public int getMilli() {
      return ((Integer)spnMilli.getModel().getValue()).intValue();
    }
    public int getMicro() {
      return ((Integer)spnMicro.getModel().getValue()).intValue();
    }
    private void handleRollOvers(JSpinner spnSmall,JSpinner spnBig, int loLimit, int hiLimit) {
      int currentValue=((Integer)spnSmall.getModel().getValue()).intValue();
      if(currentValue<loLimit) {
        spnSmall.getModel().setValue(hiLimit);
        spnBig.getModel().setValue(spnBig.getModel().getPreviousValue());
      }
      if(currentValue>hiLimit) {
        spnSmall.getModel().setValue(loLimit);
        spnBig.getModel().setValue(spnBig.getModel().getNextValue());
      }

    }
    private void handleRollOvers() {
      //Year can't roll over
      //Check Month
      String selectedMonthSpin = getMonthString();
      if(selectedMonthSpin.equals("RollPrev")) {
        spnMonth.getModel().setValue(Time.MonthAbbrev[11]);
        spnYear.getModel().setValue(spnYear.getModel().getPreviousValue());
      }
      if(selectedMonthSpin.equals("RollNext")) {
        spnMonth.getModel().setValue(Time.MonthAbbrev[0]);
        spnYear.getModel().setValue(spnYear.getModel().getNextValue());
      }
      //Check Day
      if(getDay()<1) {
        spnDay.getModel().setValue(1);
        spnMonth.getModel().setValue(spnMonth.getModel().getPreviousValue());
        spnDay.getModel().setValue(Time.getMonthLength(getYear(), getMonthNumber()));
      }
      if(getDay()>Time.getMonthLength(getYear(), getMonthNumber())) {
        spnDay.getModel().setValue(1);
        spnMonth.getModel().setValue(spnMonth.getModel().getNextValue());
      }
      handleRollOvers(spnHour, spnDay,  0,23);
      handleRollOvers(spnMin,  spnHour, 0,59);
      handleRollOvers(spnSec,  spnMin,  0,59);
      handleRollOvers(spnMilli,spnSec,  0,999);
      handleRollOvers(spnMicro,spnMilli,0,999);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spnYear = new javax.swing.JSpinner();
        spnMonth = new javax.swing.JSpinner();
        spnDay = new javax.swing.JSpinner();
        spnHour = new javax.swing.JSpinner();
        lblHMcolon = new javax.swing.JLabel();
        spnMin = new javax.swing.JSpinner();
        lblMScolon = new javax.swing.JLabel();
        spnSec = new javax.swing.JSpinner();
        lblPeriod = new javax.swing.JLabel();
        spnMilli = new javax.swing.JSpinner();
        spnMicro = new javax.swing.JSpinner();
        lblUnits = new javax.swing.JLabel();
        cboUnits = new javax.swing.JComboBox();
        lblScale = new javax.swing.JLabel();
        cboScale = new javax.swing.JComboBox();
        lblEpoch = new javax.swing.JLabel();
        cboEpoch = new javax.swing.JComboBox();
        lblValue = new javax.swing.JLabel();

        spnYear.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(2000), null, null, Integer.valueOf(1)));
        spnYear.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TimePanel.this.stateChanged(evt);
            }
        });

        spnMonth.setModel(new javax.swing.SpinnerListModel(new String[] {"RollPrev", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "RollNext"}));
        spnMonth.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TimePanel.this.stateChanged(evt);
            }
        });

        spnDay.setModel(new javax.swing.SpinnerNumberModel(1, 0, 32, 1));
        spnDay.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TimePanel.this.stateChanged(evt);
            }
        });

        spnHour.setModel(new javax.swing.SpinnerNumberModel(0, -1, 24, 1));
        spnHour.setEditor(new javax.swing.JSpinner.NumberEditor(spnHour, "00"));
        spnHour.setMinimumSize(new java.awt.Dimension(40, 20));
        spnHour.setPreferredSize(new java.awt.Dimension(40, 20));
        spnHour.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TimePanel.this.stateChanged(evt);
            }
        });

        lblHMcolon.setFont(new java.awt.Font("Tahoma", 1, 11));
        lblHMcolon.setText(":");

        spnMin.setModel(new javax.swing.SpinnerNumberModel(0, -1, 60, 1));
        spnMin.setEditor(new javax.swing.JSpinner.NumberEditor(spnMin, "00"));
        spnMin.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TimePanel.this.stateChanged(evt);
            }
        });

        lblMScolon.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMScolon.setText(":");

        spnSec.setModel(new javax.swing.SpinnerNumberModel(0, -1, 60, 1));
        spnSec.setEditor(new javax.swing.JSpinner.NumberEditor(spnSec, "00"));
        spnSec.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TimePanel.this.stateChanged(evt);
            }
        });

        lblPeriod.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblPeriod.setText(".");

        spnMilli.setModel(new javax.swing.SpinnerNumberModel(0, -1, 1000, 1));
        spnMilli.setEditor(new javax.swing.JSpinner.NumberEditor(spnMilli, "000"));
        spnMilli.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TimePanel.this.stateChanged(evt);
            }
        });

        spnMicro.setModel(new javax.swing.SpinnerNumberModel(0, -1, 1000, 1));
        spnMicro.setEditor(new javax.swing.JSpinner.NumberEditor(spnMicro, "000"));
        spnMicro.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TimePanel.this.stateChanged(evt);
            }
        });

        lblUnits.setText("Units");

        cboUnits.setModel(new DefaultComboBoxModel(TimeUnits.values()));
        cboUnits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimePanel.this.actionPerformed(evt);
            }
        });

        lblScale.setText("Scale");

        cboScale.setModel(new DefaultComboBoxModel(TimeScale.values()));
        cboScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimePanel.this.actionPerformed(evt);
            }
        });

        lblEpoch.setText("Epoch");

        cboEpoch.setModel(new DefaultComboBoxModel(TimeEpoch.values()));
        cboEpoch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimePanel.this.actionPerformed(evt);
            }
        });

        lblValue.setText("lblValue");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(spnYear, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnMonth, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnDay, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnHour, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblHMcolon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblMScolon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnSec, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPeriod))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblUnits)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboUnits, 0, 93, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblScale)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboScale, 0, 93, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblEpoch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboEpoch, 0, 93, Short.MAX_VALUE))
                    .addComponent(lblValue, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnMilli, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnMicro, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHMcolon)
                    .addComponent(spnMicro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnMilli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPeriod)
                    .addComponent(spnSec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMScolon)
                    .addComponent(spnMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUnits)
                    .addComponent(cboUnits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblScale)
                    .addComponent(cboScale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEpoch)
                    .addComponent(cboEpoch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblValue)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

private void stateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_stateChanged
  if(!inSetTime) {
    handleRollOvers();
    recalcTime();
    fireStateChanged();
  }
}//GEN-LAST:event_stateChanged

private void actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionPerformed
  if(!inSetTime) {
    recalcTime();
    fireStateChanged();
  }
}//GEN-LAST:event_actionPerformed
    private Time time;
    private boolean inSetTime;
    public Time getTime() {
      return new Time(time);
    }

    public void setTime(Time newTime) {
      inSetTime=true;
      time=new Time(newTime);
      int[] ymdhnsu=time.getymdhnsu();
      spnYear.setValue(ymdhnsu[0]);
      spnMonth.setValue(Time.MonthAbbrev[ymdhnsu[1]-1]);
      spnDay.setValue(ymdhnsu[2]);
      spnHour.setValue(ymdhnsu[3]);
      spnMin.setValue(ymdhnsu[4]);
      spnSec.setValue(ymdhnsu[5]);
      spnMilli.setValue(ymdhnsu[6]/1000);
      spnMicro.setValue(ymdhnsu[6]%1000);
      cboUnits.setSelectedItem(time.Units);
      cboScale.setSelectedItem(time.Scale);
      cboEpoch.setSelectedItem(time.Epoch);
      lblValue.setText(time.toString());      
      inSetTime=false;
    }

    private void recalcTime() {
        time = new Time(
                ((Integer) (spnYear.getModel().getValue())).intValue(),
                getMonthNumber(),
                ((Integer) (spnDay.getModel().getValue())).intValue(),
                ((Integer) (spnHour.getModel().getValue())).intValue(),
                ((Integer) (spnMin.getModel().getValue())).intValue(),
                ((Integer) (spnSec.getModel().getValue())).intValue(),
                ((Integer) (spnMilli.getModel().getValue())).intValue() * 1000 +
                ((Integer) (spnMicro.getModel().getValue())).intValue(),
                ((TimeUnits) (cboUnits.getSelectedItem())),
                ((TimeScale) (cboScale.getSelectedItem())),
                ((TimeEpoch) (cboEpoch.getSelectedItem())));
        lblValue.setText(time.toString());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cboEpoch;
    private javax.swing.JComboBox cboScale;
    private javax.swing.JComboBox cboUnits;
    private javax.swing.JLabel lblEpoch;
    private javax.swing.JLabel lblHMcolon;
    private javax.swing.JLabel lblMScolon;
    private javax.swing.JLabel lblPeriod;
    private javax.swing.JLabel lblScale;
    private javax.swing.JLabel lblUnits;
    private javax.swing.JLabel lblValue;
    private javax.swing.JSpinner spnDay;
    private javax.swing.JSpinner spnHour;
    private javax.swing.JSpinner spnMicro;
    private javax.swing.JSpinner spnMilli;
    private javax.swing.JSpinner spnMin;
    private javax.swing.JSpinner spnMonth;
    private javax.swing.JSpinner spnSec;
    private javax.swing.JSpinner spnYear;
    // End of variables declaration//GEN-END:variables

    /**
     * Create the GUI and show it.  For thread safety,
     * this method should be invoked from the
     * event-dispatching thread.
     */
    private static void createAndShowGUI() {
        //Create and set up the window.
        JFrame frame = new JFrame("TimePanel Main");
        TimePanel TP = new TimePanel();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        //Set up the content pane.
        frame.getContentPane().add(TP);

        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }

    public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                createAndShowGUI();
            }
        });
    }

    private transient ChangeEvent changeEvent;
    /**
     * Adds a listener to the list that is notified each time a change
     * to the model occurs.  The source of <code>ChangeEvents</code> 
     * delivered to <code>ChangeListeners</code> will be this 
     * <code>JSpinner</code>.  Note also that replacing the model
     * will not affect listeners added directly to JSpinner. 
     * Applications can add listeners to  the model directly.  In that 
     * case is that the source of the event would be the 
     * <code>SpinnerModel</code>.  
     * 
     * @param listener the <code>ChangeListener</code> to add
     * @see #removeChangeListener
     * @see #getModel
     */
    public void addChangeListener(ChangeListener listener) {
        listenerList.add(ChangeListener.class, listener);
    }

    /**
     * Returns an array of all the <code>ChangeListener</code>s added
     * to this JSpinner with addChangeListener().
     *
     * @return all of the <code>ChangeListener</code>s added or an empty
     *         array if no listeners have been added
     */
    public ChangeListener[] getChangeListeners() {
        return (ChangeListener[])listenerList.getListeners(
                ChangeListener.class);
    }

    /**
     * Sends a <code>ChangeEvent</code>, whose source is this 
     * <code>JSpinner</code>, to each <code>ChangeListener</code>.  
     * When a <code>ChangeListener</code> has been added 
     * to the spinner, this method method is called each time 
     * a <code>ChangeEvent</code> is received from the model.
     * 
     * @see #addChangeListener
     * @see #removeChangeListener
     * @see EventListenerList
     */
    protected void fireStateChanged() {
        Object[] listeners = listenerList.getListenerList();
        for (int i = listeners.length - 2; i >= 0; i -= 2) {
            if (listeners[i] == ChangeListener.class) {
                if (changeEvent == null) {
                    changeEvent = new ChangeEvent(this);
                }
                ((ChangeListener)listeners[i+1]).stateChanged(changeEvent);
            }
        }
    }   

    /**
     * Removes a <code>ChangeListener</code> from this spinner.
     *
     * @param listener the <code>ChangeListener</code> to remove
     * @see #fireStateChanged
     * @see #addChangeListener
     */
    public void removeChangeListener(ChangeListener listener) {
        listenerList.remove(ChangeListener.class, listener);
    }

}
